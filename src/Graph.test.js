import Graph from './Graph'

describe('Graph', () => {
  it('graph', () => {
    const graph = new Graph()
    graph.addVertices('A')
    graph.addVertices('B')
    graph.addVertices('C')
    graph.addVertices('D')
    graph.addVertices('E')
    graph.addVertices('F')
    graph.addEdge('A', 'B')
    graph.addEdge('A', 'C')
    graph.addEdge('A', 'D')
    graph.addEdge('B', 'E')
    graph.addEdge('B', 'F')
    graph.addEdge('C', 'D')
    expect(graph.getVertices()).toEqual(['A', 'B', 'C', 'D', 'E', 'F'])
    expect(graph.getList()['A']).toEqual(['B', 'C', 'D'])
    expect(graph.getList()['B']).toEqual(['A', 'E', 'F'])
    expect(graph.getList()['C']).toEqual(['A', 'D'])
    expect(graph.getList()['D']).toEqual(['A', 'C'])
    expect(graph.getList()['E']).toEqual(['B'])
    expect(graph.getList()['F']).toEqual(['B'])

    let result = graph.traverse('A')
    expect(result.colors['A']).toEqual('black')
    expect(result.colors['B']).toEqual('black')
    expect(result.colors['C']).toEqual('black')
    expect(result.colors['D']).toEqual('black')
    expect(result.colors['E']).toEqual('black')
    expect(result.colors['F']).toEqual('black')
    expect(result.distance['A']).toEqual(0)
    expect(result.distance['B']).toEqual(1)
    expect(result.distance['C']).toEqual(1)
    expect(result.distance['D']).toEqual(1)
    expect(result.distance['E']).toEqual(2)
    expect(result.distance['F']).toEqual(2)
    expect(result.prev['A']).toEqual(null)
    expect(result.prev['B']).toEqual('A')
    expect(result.prev['C']).toEqual('A')
    expect(result.prev['D']).toEqual('A')
    expect(result.prev['E']).toEqual('B')
    expect(result.prev['F']).toEqual('B')

    graph.addEdge('D', 'F')
    expect(graph.getPath('A', 'F')).toEqual('A-B-F')
    expect(
      graph.traverse2('A', (e) => {
        return e
      })
    ).toEqual(['A', 'B', 'E', 'F', 'D', 'C'])
  })
})
